# Instruction encoding map
instruction_encoding = {
    # <mnemonic>: (<opcode>, <funct3>, <funct7>)
    # R-type instructions: have opcode, funct3, and funct7
    # I-type instructions: have opcode and funct3
    # S-type instructions: have opcode and funct3
    # SB-type instructions: have opcode and funct3
    # U-type instructions: have opcode
    # UJ-type instructions: have opcode
    "add": ("0110011", "000", "0000000"),
    "addu": ("0010000", "000", "0000000"),
    "sub": ("0110011", "000", "0100000"),
    "subu": ("0010000", "001", "0000000"),
    "mul": ("0110011", "000", "0000001"),
    "mulu": ("0010000", "010", "0000000"),
    "mulh": ("0110011", "001", "0000001"),
    "mulhu": ("0110011", "011", "0000001"),
    "mulhsu": ("0110011", "010", "0000001"),
    "div": ("0110011", "100", "0000001"),
    "divu": ("0110011", "101", "0000001"),
    "rem": ("0110011", "110", "0000001"),
    "remu": ("0110011", "111", "0000001"),
    "seq": ("0000100", "000", "0000000"),
    "slt": ("0110011", "010", "0000000"),
    "sltu": ("0110011", "011", "0000000"),
    "sle": ("0000100", "010", "0000000"),
    "sleu": ("0001100", "010", "0000000"),
    "sgt": ("0000100", "011", "0000000"),
    "sgtu": ("0001100", "011", "0000000"),
    "sge": ("0001100", "100", "0000000"),
    "sgeu": ("0001100", "100", "0000000"),
    "not": ("0001000", "000", "0000000"),
    "and": ("0110011", "111", "0000000"),
    "or": ("0110011", "110", "0000000"),
    "xor": ("0110011", "100", "0000000"),
    "nand": ("0001000", "100", "0000000"),
    "nor": ("0001000", "101", "0000000"),
    "xnor": ("0001000", "110", "0000000"),
    "sll": ("0110011", "001", "0000000"),
    "srl": ("0011100", "001", "0000000"),
    "sla": ("0011100", "010", "0000000"),
    "sra": ("0100000", "101", "0000000"),
    # "addi": ("0000001", "000", "-1"),
    # "subi": ("0000001", "001", "-1"),
    # "muli": ("0000001", "010", "-1"),
    # "divi": ("0000001", "100", "-1"),
    # "remi": ("0000001", "101", "-1"),
    # "seqi": ("0000101", "000", "-1"),
    # "slti": ("0000101", "001", "-1"),
    # "sltui": ("0001101", "001", "-1"),
    # "slei": ("0000101", "010", "-1"),
    # "sleui": ("0001101", "010", "-1"),
    # "sgti": ("0000101", "011", "-1"),
    # "sgtui": ("0001101", "011", "-1"),
    # "sgei": ("0000101", "100", "-1"),
    # "sgeui": ("0001101", "100", "-1"),
    # "noti": ("0001001", "000", "-1"),
    # "andi": ("0001001", "001", "-1"),
    # "ori": ("0001001", "010", "-1"),
    # "xori": ("0001001", "011", "-1"),
    # "nandi": ("0001001", "100", "-1"),
    # "nori": ("0001001", "101", "-1"),
    # "xnori": ("0001001", "110", "-1"),
    # "slli": ("0011101", "000", "-1"),
    # "srli": ("0011101", "001", "-1"),
    # "srai": ("0011101", "011", "-1"),
    # "beq": ("0000110", "000", "-1"),
    # "bne": ("0000110", "111", "-1"),
    # "blt": ("0000110", "001", "-1"),
    # "bltu": ("0001110", "001", "-1"),
    # "ble": ("0000110", "010", "-1"),
    # "bleu": ("0001110", "010", "-1"),
    # "bgt": ("0000110", "011", "-1"),
    # "bgtu": ("0001110", "011", "-1"),
    # "bge": ("0000110", "100", "-1"),
    # "bgeu": ("0001110", "100", "-1"),
    # "j": ("0000011", "-1", "-1"),
    # "jal": ("0000111", "-1", "-1"),
    # "jalr": ("0001011", "000", "-1"),
    # "lui": ("0001111", "-1", "-1"),
    # "auipc": ("0010011", "-1", "-1"),
    # I type
    "addi": ("0010011", "000", "-1"),
    # "subi": ("0000001", "001", "-1"),
    # "muli": ("0000001", "010", "-1"),
    # "divi": ("0000001", "100", "-1"),
    # "remi": ("0000001", "101", "-1"),
    # "seqi": ("0000101", "000", "-1"),
    "slti": ("0010011", "010", "-1"),
    "sltui": ("0010011", "011", "-1"),
    # "slei": ("0000101", "010", "-1"),
    # "sleui": ("0001101", "010", "-1"),
    # "sgti": ("0000101", "011", "-1"),
    # "sgtui": ("0001101", "011", "-1"),
    # "sgei": ("0000101", "100", "-1"),
    # "sgeui": ("0001101", "100", "-1"),
    # "noti": ("0001001", "000", "-1"),
    "andi": ("0010011", "111", "-1"),
    "ori": ("0010011", "110", "-1"),
    "xori": ("0010011", "100", "-1"),
    # "nandi": ("0001001", "100", "-1"),
    # "nori": ("0001001", "101", "-1"),
    # "xnori": ("0001001", "110", "-1"),
    "slli": ("0010011", "001", "0000000"),
    "srli": ("0010011", "101", "0000000"),
    "srai": ("0010011", "101", "0100000"),
    "jalr": ("1100111", "000", "-1"),

    "beq": ("1100011", "000", "-1"),
    "bne": ("1100011", "001", "-1"),
    "blt": ("1100011", "100", "-1"),
    "bltu": ("1100011", "110", "-1"),
    # "ble": ("0000110", "010", "-1"),
    # "bleu": ("0001110", "010", "-1"),
    # "bgt": ("0000110", "011", "-1"),
    # "bgtu": ("0001110", "011", "-1"),
    "bge": ("1100011", "101", "-1"),
    "bgeu": ("1100011", "111", "-1"),
    "sb": ("0100011", "010", "-1"),
    "sh": ("0100011", "001", "-1"),
    "sw": ("0100011", "010", "-1"),
    # UType
    # "j": ("0000011", "-1", "-1"),
    "jal": ("1101111", "-1", "-1"),
    # "jalr": ("0001011", "000", "-1"),
    "lui": ("0110111", "-1", "-1"),
    "auipc": ("0010111","-1","-1")
}

# Register mapping
register_mapping = {
    "zero": "00000", "x0": "00000",
    "ra": "00001", "x1": "00001",
    "sp": "00010", "x2": "00010",
    "gp": "00011", "x3": "00011",
    "tp": "00100", "x4": "00100",
    "t0": "00101", "x5": "00101",
    "t1": "00110", "x6": "00110",
    "t2": "00111", "x7": "00111",
    "s0": "01000", "fp": "01000", "x8": "01000",
    "s1": "01001", "x9": "01001",
    "a0": "01010", "x10": "01010",
    "a1": "01011", "x11": "01011",
    "a2": "01100", "x12": "01100",
    "a3": "01101", "x13": "01101",
    "a4": "01110", "x14": "01110",
    "a5": "01111", "x15": "01111",
    "a6": "10000", "x16": "10000",
    "a7": "10001", "x17": "10001",
    "s2": "10010", "x18": "10010",
    "s3": "10011", "x19": "10011",
    "s4": "10100", "x20": "10100",
    "s5": "10101", "x21": "10101",
    "s6": "10110", "x22": "10110",
    "s7": "10111", "x23": "10111",
    "s8": "11000", "x24": "11000",
    "s9": "11001", "x25": "11001",
    "s10": "11010", "x26": "11010",
    "s11": "11011", "x27": "11011",
    "t3": "11100", "x28": "11100",
    "t4": "11101", "x29": "11101",
    "t5": "11110", "x30": "11110", 
    "t6": "11111", "x31": "11111" 
}

# Instruction maps
R_instr = [
    "add", "addu", "sub" , "subu" ,
    "mul", "mulu", "mulh", "mulhu",
    "div", "divu", "rem" , "remu" ,
    "seq", 
    "slt", "sltu", 
    "sle", "sleu",
    "sge", "sgeu",
    "not", "and" , "or"  , "xor" , "nand",  "nor", "xnor",
    "sll", "srl"
]

I_instr = [
    "addi" ,  "subi",  "muli",  "divi",
    "remi" ,  "seqi",
    "slti" , "sltui",  "slei", "sleui",
    "sgti" , "sgtui",  "sgei", "sgeui",
    "noti" , 
    "andi" ,   "ori",  "xori",
    "nandi",  "nori", "xnori",
    "slli" ,  "srli", "srai" , 
    "jalr"
]

S_instr = [
    "beq", "bne", 
    "blt", "bltu", 
    "ble", "bleu", 
    "bgt", "bgtu", 
    "bge", "bgeu",
    "sb", "sh", "sw"
]

U_instr = [
    "j", "jal",
    "lui", "auipc"
]

class SymbolTable:
    def __init__(self):
        self.label_addresses = {}  # For text section
        self.data_labels = {}  # For data section
        self.curr_data_address = 0

    def add_text_label(self, label, address):
        if label not in self.label_addresses:
            self.label_addresses[label] = address

    def add_data_label(self, label):
        if label not in self.data_labels:
            self.data_labels[label] = self.curr_data_address

    def get_text_address(self, label):
        return self.label_addresses.get(label, None)

    def get_data_address(self, label):
        return self.data_labels.get(label, None)

    def print_symbol_table(self):
        print("Symbol Table:")
        print("Label                Address (Hex)")
        print("-" * 30)
        for label, address in self.label_addresses.items():
            print(f"{label:<20} {address:#04x}")
        for label, address in self.data_labels.items():
            print(f"{label:<20} {address:#04x}")
        print("-" * 30)

class Assembler:
    def __init__(self):
        self.symbol_table = SymbolTable()
        self.instructions = []
        self.data_section = []
        self.binary_data = []  # To store binary representation of data
        self.binary_instructions = []  # To store binary representation of instructions

    def first_pass(self, asm_code):
        lines = asm_code.splitlines()
        current_section = None

        currLineNo = 0

        for line in lines:
            line = line.strip()

            if line.startswith('.data'):
                current_section = 'data'
                continue
            elif line.startswith('.text'):
                current_section = 'text'
                continue
            elif line.startswith('.globl'):
                continue  # Ignore global directive

            if current_section == 'data':
                if line.endswith(":"):
                    label = line[:-1]
                    self.symbol_table.add_data_label(label)
                elif line:  # Non-empty line
                    # Assuming .asciz is a single string for simplicity
                    if ".asciz" in line:
                        # Extract the string between the double quotes
                        string = line.split('"')[1]
                        # Convert the string to a list of ASCII values
                        ascii_values = [ord(char) for char in string]
                        # Append a null terminator
                        ascii_values.append(0)
                        # Convert the ASCII values to binary
                        binary_data = [format(value, '08b') for value in ascii_values]
                        # Combine the binary values into a single string
                        # binary_data = ''.join(binary_data)
                        #concat binary_data in groups of fours, i.e, 32 bits, index (0,1,2,3), (4,5,6,7) ...
                        binary_data = [''.join(binary_data[i:i+4]) for i in range(0, len(binary_data), 4)]
                        # Append the binary data to the list
                        for i in range(len(binary_data)):
                            if len(binary_data[i]) < 32:
                                binary_data[i] = binary_data[i] + '0'*(32-len(binary_data[i]))
                            self.binary_data.append(binary_data[i])
                        # self.binary_data.append(binary_data)
                        # Increment the current data address
                        self.symbol_table.curr_data_address += len(binary_data)
                    else: 
                        print("Error: Invalid data section directive")

            elif current_section == 'text':
                if line.endswith(":"):
                    label = line[:-1]
                    self.symbol_table.add_text_label(label, currLineNo)
                elif line:  # Non-empty line
                    self.instructions.append(line)
                    currLineNo+=1

    def second_pass(self):
        print("Second pass:")
        for instruction in self.instructions:
            print(instruction)
            # instruction format: <mnemonic> <rd>,<rs1>,<rs2/imm>
            # no spaces between registers and comma separated
            # print(instruction)
            parts = [instruction.split()[0]] #mnemonic
            if parts[0] == 'nop' or parts[0] == 'ecall':
                continue
            parts.extend(instruction.split()[1].split(","))
            mnemonic = parts[0]
            print(parts)
            if mnemonic in instruction_encoding:
                encoding = instruction_encoding[mnemonic]
                opcode = encoding[0]
                funct3 = encoding[1]
                funct7 = encoding[2]

                if mnemonic in R_instr:
                    rd = register_mapping[parts[1]]
                    rs1 = register_mapping[parts[2]]
                    rs2 = register_mapping[parts[3]]
                    self.binary_instructions.append(f"{funct7}{rs2}{rs1}{funct3}{rd}{opcode}")
                    print(self.binary_instructions[-1])
                elif mnemonic in I_instr:
                    rd = register_mapping[parts[1]]
                    rs1 = register_mapping[parts[2]]
                    # immediate value is an int in decimal
                    imm_val = int(parts[3])
                    if imm_val < 0:
                        imm = format((1 << 12) + imm_val, '012b')
                    else:
                        imm = format(imm_val, '012b')
                    self.binary_instructions.append(f"{imm}{rs1}{funct3}{rd}{opcode}")
                    print(self.binary_instructions[-1])
                elif mnemonic in S_instr:
                    if mnemonic == "sw":
                        rs2 = register_mapping[parts[1]]
                        # split <offset>(rs1) to get offset and rs1
                        offset, rs1 = parts[2].split("(")
                        rs1 = register_mapping[rs1[:-1]]
                        imm = format(int(offset), '012b')
                        self.binary_instructions.append(f"{imm[5:12]}{rs2}{rs1}{funct3}{imm[:5]}{opcode}")
                        print(self.binary_instructions[-1])
                    else:
                        rs1 = register_mapping[parts[1]]
                        rs2 = register_mapping[parts[2]]
                        # parts[3] is the immediate label
                        # get address of the label from the symbol table
                        imm = self.symbol_table.get_text_address(parts[3])
                        imm = format(imm, '012b')
                        self.binary_instructions.append(f"{imm[5:12]}{rs2}{rs1}{funct3}{imm[:5]}{opcode}")
                        print(self.binary_instructions[-1])
                elif mnemonic in U_instr:
                    if mnemonic == "lui":
                        rd = register_mapping[parts[1]]
                        imm = format(int(parts[2]), '020b')
                        self.binary_instructions.append(f"{imm}{rd}{opcode}")
                        print(self.binary_instructions[-1])
                    else:
                        rd = register_mapping[parts[1]]
                        imm = self.symbol_table.get_text_address(parts[2])
                        imm = format(imm, '020b')
                        self.binary_instructions.append(f"{imm}{rd}{opcode}")
                        print(self.binary_instructions[-1])
                

    def print_binary_data_section(self):
        print("Data Section Binary Dump:")
        # print the binary data
        for i, data in enumerate(self.binary_data):
            address = i
            print(f"{address:#04x}: {data}")

    def print_binary_text_section(self):
        print("Text Section Binary Dump:")
        # print the binary instructions
        # print(len(self.instructions))
        # print(len(self.binary_instructions))
        for i, instruction in enumerate(self.binary_instructions):
            address = i
            print(f"{instruction}")


# Example usage:
lines ="""
.section
.data
.section
.text
jal x30,__OS_mread
__OS_mread:
sw x1,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
sw x2,0(x5)
addi x6,x2,40
lui x5,2
addi x5,x5,12
sw x2,0(x5)
addi x2,x2,60
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,8
lw x6,0(x6)
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x2,0(x5)
lw x5,-8(x2)
lui x6,2
addi x6,x6,16
sw x5,0(x6)
lw x5,-12(x2)
lui x6,2
addi x6,x6,12
sw x5,0(x6)
lw x7,-16(x2)
lw x5,-20(x2)
lui x6,2
addi x6,x6,4
sw x5,0(x6)
lw x5,-4(x2)
lui x6,2
addi x6,x6,8
lw x2,0(x6)
addi x2,x2,4
lui x6,2
addi x6,x6,8
sw x7,0(x6)
jalr x0,x1,0
__OS_mwrite:
sw x1,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
sw x2,0(x5)
addi x6,x2,40
lui x5,2
addi x5,x5,12
sw x2,0(x5)
addi x2,x2,60
lui x5,2
addi x5,x5,8
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,4
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
# Store value at address
addi x2,x2,-4
lw x20,0(x2)
addi x2,x2,-4
lw x21,0(x2)
sw x20,0(x21)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,8
lw x6,0(x6)
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x2,0(x5)
lw x5,-8(x2)
lui x6,2
addi x6,x6,16
sw x5,0(x6)
lw x5,-12(x2)
lui x6,2
addi x6,x6,12
sw x5,0(x6)
lw x7,-16(x2)
lw x5,-20(x2)
lui x6,2
addi x6,x6,4
sw x5,0(x6)
lw x5,-4(x2)
lui x6,2
addi x6,x6,8
lw x2,0(x6)
addi x2,x2,4
lui x6,2
addi x6,x6,8
sw x7,0(x6)
jalr x0,x1,0
addi x5,x0,64
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,4
sw x5,0(x6)
addi x5,x0,37
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,8
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,12
sw x5,0(x6)
addi x5,x0,10
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,16
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,28
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,32
sw x5,0(x6)
__write_char_at:
sw x1,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
sw x2,0(x5)
addi x6,x2,40
lui x5,2
addi x5,x5,12
sw x2,0(x5)
addi x2,x2,60
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,8
lw x6,0(x6)
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x2,0(x5)
lw x5,-8(x2)
lui x6,2
addi x6,x6,16
sw x5,0(x6)
lw x5,-12(x2)
lui x6,2
addi x6,x6,12
sw x5,0(x6)
lw x7,-16(x2)
lw x5,-20(x2)
lui x6,2
addi x6,x6,4
sw x5,0(x6)
lw x5,-4(x2)
lui x6,2
addi x6,x6,8
lw x2,0(x6)
addi x2,x2,4
lui x6,2
addi x6,x6,8
sw x7,0(x6)
jalr x0,x1,0
__save_screen:
sw x1,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
sw x2,0(x5)
addi x6,x2,40
lui x5,2
addi x5,x5,12
sw x2,0(x5)
addi x2,x2,60
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,8
lw x6,0(x6)
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x2,0(x5)
lw x5,-8(x2)
lui x6,2
addi x6,x6,16
sw x5,0(x6)
lw x5,-12(x2)
lui x6,2
addi x6,x6,12
sw x5,0(x6)
lw x7,-16(x2)
lw x5,-20(x2)
lui x6,2
addi x6,x6,4
sw x5,0(x6)
lw x5,-4(x2)
lui x6,2
addi x6,x6,8
lw x2,0(x6)
addi x2,x2,4
lui x6,2
addi x6,x6,8
sw x7,0(x6)
jalr x0,x1,0
__write_int:
sw x1,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
sw x2,0(x5)
addi x6,x2,40
lui x5,2
addi x5,x5,12
sw x2,0(x5)
addi x2,x2,60
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,8
lw x6,0(x6)
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x2,0(x5)
lw x5,-8(x2)
lui x6,2
addi x6,x6,16
sw x5,0(x6)
lw x5,-12(x2)
lui x6,2
addi x6,x6,12
sw x5,0(x6)
lw x7,-16(x2)
lw x5,-20(x2)
lui x6,2
addi x6,x6,4
sw x5,0(x6)
lw x5,-4(x2)
lui x6,2
addi x6,x6,8
lw x2,0(x6)
addi x2,x2,4
lui x6,2
addi x6,x6,8
sw x7,0(x6)
jalr x0,x1,0
lui x5,61
addi x5,x5,148
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,56
sw x5,0(x6)
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,60
sw x5,0(x6)
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,64
sw x5,0(x6)
addi x5,x0,1024
sw x5,0(x2)
addi x2,x2,4
# Storing pointer information
lui x5,2
addi x5,x5,24
add x5,x5,x8
lw x6,0(x5)
lui x7,3
addi x7,x7,-1984
sw x7,0(x6)
addi x7,x0,1024
sw x7,4(x6)
addi x7,x0,1
sw x7,8(x6)
addi x6,x6,12
sw x6,0(x5)
# Pushing pointer triplet to stack
lui x5,3
addi x5,x5,-1984
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,1024
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,60
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,60
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,248
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,220
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,60
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,60
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,6
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,128
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,206
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,222
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,246
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,230
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,112
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,28
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,60
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,30
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,248
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,248
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,112
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,222
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,222
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,222
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,60
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,60
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,248
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,248
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,98
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,104
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,104
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,98
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,98
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,104
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,104
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,240
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,60
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,206
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,62
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,30
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,230
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,230
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,240
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,98
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,238
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,214
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,230
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,246
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,222
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,206
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,240
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,220
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,28
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,230
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,224
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,112
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,28
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,180
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,214
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,238
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,140
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,50
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,6
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,2
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,16
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,224
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,220
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,28
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,240
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,240
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,248
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,224
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,230
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,112
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,224
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,230
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,112
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,214
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,248
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,220
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,240
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,30
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,220
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,102
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,96
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,240
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,192
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,248
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,16
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,52
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,120
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,214
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,254
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,56
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,108
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,198
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,204
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,124
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,248
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,152
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,100
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,252
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,28
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,224
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,28
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,24
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,224
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,28
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,48
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,224
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,118
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,220
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
__clear_screen:
sw x1,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
sw x2,0(x5)
addi x6,x2,40
lui x5,2
addi x5,x5,12
sw x2,0(x5)
addi x2,x2,60
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,12
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,56
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,1
addi x5,x5,703
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,60
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,60
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,64
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,64
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,56
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,64
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,8
lw x7,0(x5)
addi x5,x2,-12
lui x6,2
addi x6,x6,8
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
sw x7,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,12
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,16
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
jal x1,__OS_mwrite
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,64
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,64
sw x5,0(x6)
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
jal x30,__L0
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
jal x30,__end_if_0
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,8
lw x6,0(x6)
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x2,0(x5)
lw x5,-8(x2)
lui x6,2
addi x6,x6,16
sw x5,0(x6)
lw x5,-12(x2)
lui x6,2
addi x6,x6,12
sw x5,0(x6)
lw x7,-16(x2)
lw x5,-20(x2)
lui x6,2
addi x6,x6,4
sw x5,0(x6)
lw x5,-4(x2)
lui x6,2
addi x6,x6,8
lw x2,0(x6)
addi x2,x2,4
lui x6,2
addi x6,x6,8
sw x7,0(x6)
jalr x0,x1,0
__write_char:
sw x1,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
sw x2,0(x5)
addi x6,x2,40
lui x5,2
addi x5,x5,12
sw x2,0(x5)
addi x2,x2,60
lui x5,2
addi x5,x5,8
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,4
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,12
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,96
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,10
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,8
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,8
lw x7,0(x5)
addi x5,x2,-4
lui x6,2
addi x6,x6,8
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
sw x7,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,12
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,16
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
jal x1,__clear_screen
jal x30,__end_if_3
jal x30,__end_if_2
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,96
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,95
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,24
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,24
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,4
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,8
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
jal x30,__end_if_5
jal x30,__end_if_4
jal x30,__end_if_2
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,96
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,13
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
jal x30,__end_if_2
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,96
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,12
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,8
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
jal x30,__end_if_6
jal x30,__end_if_2
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,96
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,9
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,24
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,4
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,24
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,4
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,8
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
jal x30,__end_if_8
jal x30,__end_if_7
jal x30,__end_if_2
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,96
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,24
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
jal x30,__end_if_10
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,4
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,20
sw x5,0(x6)
jal x30,__end_if_9
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,24
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,24
sw x5,0(x6)
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,56
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,4
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,20
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,4
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,24
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,4
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,60
sw x5,0(x6)
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,64
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,64
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,60
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,4
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,4
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,64
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,8
lw x7,0(x5)
addi x5,x2,-8
lui x6,2
addi x6,x6,8
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
sw x7,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,12
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,16
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
jal x1,__OS_mread
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,104
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,104
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,256
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,108
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,24
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,4
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,112
sw x5,0(x6)
addi x5,x0,3
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,116
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,116
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,112
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,108
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,256
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,108
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,116
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,116
sw x5,0(x6)
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
jal x30,__L2
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,108
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,60
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,4
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,4
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,64
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,8
lw x7,0(x5)
addi x5,x2,-12
lui x6,2
addi x6,x6,8
sw x5,0(x6)
lui x5,2
addi x5,x5,4
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
sw x7,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,12
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,16
lw x6,0(x5)
sw x6,0(x2)
addi x2,x2,4
jal x1,__OS_mwrite
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,64
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
addi x2,x2,-4
lw x6,0(x2)
add x5,x6,x5
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,64
sw x5,0(x6)
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
jal x30,__L1
jal x30,__end_if_2
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
# Storing pointer information
lui x5,2
addi x5,x5,24
add x5,x5,x8
lw x6,0(x5)
lui x7,4
addi x7,x7,-1984
sw x7,0(x6)
addi x7,x0,8
sw x7,4(x6)
addi x7,x0,1
sw x7,8(x6)
addi x6,x6,12
sw x6,0(x5)
# Pushing pointer triplet to stack
lui x5,4
addi x5,x5,-1984
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,1
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,0
sw x5,0(x2)
addi x2,x2,4
addi x2,x2,-4
lw x5,0(x2)
lui x6,2
addi x6,x6,4
add x6,x6,x8
lw x6,0(x6)
addi x6,x6,64
sw x5,0(x6)
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,64
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
addi x5,x0,8
sw x5,0(x2)
addi x2,x2,4
lui x5,2
addi x5,x5,4
add x5,x5,x8
lw x5,0(x5)
addi x5,x5,64
lw x5,0(x5)
sw x5,0(x2)
addi x2,x2,4
# Calculate array index address
addi x2,x2,-4
lw x20,0(x2)
addi x2,x2,-12
lw x21,0(x2)
lw x22,4(x2)
lw x23,8(x2)
bge x20,x22,__array_out_of_bounds
blt x20,x0,__array_out_of_bounds
# Determine element size based on type
addi x24,x0,0
jal x1,__type_check
            # Multiplication of x20 and x24
            addi x26,x0,0     # Initialize result
            addi x27,x0,0     # Initialize counter
            add x28,x20,x0  # Copy multiplicand
            add x29,x24,x0  # Copy multiplier
            
            __mul_0_loop:
            beq x29,x0,__mul_0_done
            andi x30,x29,1    # Check LSB
            beq x30,x0,__mul_0_shift
            add x26,x26,x28   # Add multiplicand to result
            
            __mul_0_shift:
"""

assembler = Assembler()
assembler.first_pass(lines)
assembler.symbol_table.print_symbol_table()
assembler.second_pass()
assembler.print_binary_data_section()
assembler.print_binary_text_section()

